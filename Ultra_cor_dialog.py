# -*- coding: utf-8 -*-
"""
/***************************************************************************
 UltracorDialog
                                 A QGIS plugin
 Ultracam Atmospheric correction
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-08-25
        git sha              : $Format:%H$
        copyright            : (C) 2024 by IGAC
        email                : alexander.ariza@igac.gov.co
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import webbrowser
from qgis.PyQt import QtGui, uic, QtWidgets
from qgis.PyQt.QtCore import QThread, pyqtSignal, Qt
from qgis.PyQt.QtWidgets import QFileDialog, QMessageBox
from osgeo import gdal
import numpy as np
from qgis.core import QgsProject, QgsRasterLayer

# Carga el archivo .ui
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Ultra_cor_dialog_base.ui'))

class UltracorDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(UltracorDialog, self).__init__(parent)
        self.setupUi(self)

        # Cargar el ícono en el QLabel
        self.icon_label.setPixmap(QtGui.QPixmap('C:/Users/carlo/AppData/Roaming/QGIS/QGIS3/profiles/default/python/plugins/ultra_cor/icon.png'))

        # Conectar botones a métodos
        self.btn_select_file.clicked.connect(self.select_file)
        self.btn_save_file.clicked.connect(self.save_file)
        self.btn_load_file.clicked.connect(self.load_selected_file)
        self.pushButtonhelp.clicked.connect(self.open_help_url)
        self.pushButtoncancelar.clicked.connect(self.cancel_process)

        # Conectar el botón OK para realizar la corrección radiométrica
        self.button_box.accepted.connect(self.on_ok_button_clicked)
        self.button_box.rejected.connect(self.clean_txt_file_path)

        # Inicializar el estado de la barra de progreso y la cancelación
        self.progressBar.setValue(0)
        self.is_canceled = False

        # Conectar los botones a las funciones para las bandas
        self.btnAddBandblue.clicked.connect(self.add_blue_band)
        self.btnAddBandgreen.clicked.connect(self.add_green_band)
        self.btnAddBandred.clicked.connect(self.add_red_band)
        self.btnAddBandnir.clicked.connect(self.add_nir_band)

        # Establecer la opción "N/A" por defecto en NIR
        self.comboBoxNIRIndex.addItem("N/A")

    def add_blue_band(self):
        """Agrega la banda azul seleccionada al QLineEdit."""
        self.leBandIndexblue.setText(self.comboBoxBlueIndex.currentText())
        self.leSolarIrradianceblue.setText(str(self.doubleSpinBox_SolarIrradiance_Blue.value()))
        self.leOffsetblue.setText(str(self.doubleSpinBox_Offset_Blue.value()))
        self.leScaleFactorblue.setText(str(self.doubleSpinBox_scale_factor_Blue.value()))

    def add_green_band(self):
        """Agrega la banda verde seleccionada al QLineEdit."""
        self.leBandIndexgreen.setText(self.comboBoxGreenIndex.currentText())
        self.leSolarIrradiancegreen.setText(str(self.doubleSpinBox_SolarIrradiance_Green.value()))
        self.leOffsetgreen.setText(str(self.doubleSpinBox_Offset_Green.value()))
        self.leScaleFactorgreen.setText(str(self.doubleSpinBox_scale_factor_Green.value()))

    def add_red_band(self):
        """Agrega la banda roja seleccionada al QLineEdit."""
        self.leBandIndexred.setText(self.comboBoxRedIndex.currentText())
        self.leSolarIrradiancered.setText(str(self.doubleSpinBox_SolarIrradiance_Red.value()))
        self.leOffsetred.setText(str(self.doubleSpinBox_Offset_Red.value()))
        self.leScaleFactorred.setText(str(self.doubleSpinBox_scale_factor_Red.value()))

    def add_nir_band(self):
        """Agrega la banda NIR seleccionada al QLineEdit."""
        self.leBandIndexnir.setText(self.comboBoxNIRIndex.currentText())
        self.leSolarIrradiancenir.setText(str(self.doubleSpinBox_SolarIrradiance_NIR.value()))
        self.leOffsetnir.setText(str(self.doubleSpinBox_Offset_NIR.value()))
        self.leScaleFactornir.setText(str(self.doubleSpinBox_scale_factor_NIR.value()))

    def clean_txt_file_path(self):
        """Limpiar el QLineEdit."""
        self.txt_file_path.clear()
        self.txt_file_path_save.clear()

    def select_file(self):
        """Método para seleccionar un archivo usando un diálogo de archivos."""
        file_name, _ = QFileDialog.getOpenFileName(self, "Seleccionar archivo", "", "Imágenes TIFF (*.tif *.tiff);;Todos los archivos (*)")
        if file_name:
            self.txt_file_path.setText(file_name)
            self.populate_band_comboboxes(file_name)

    def save_file(self):
        """Método para seleccionar el archivo de salida y actualizar el QLineEdit correspondiente."""
        file_name, _ = QFileDialog.getSaveFileName(self, "Guardar archivo", "", "Imágenes TIFF (*.tif *.tiff);;Todos los archivos (*)")
        if file_name:
            self.txt_file_path_save.setText(file_name)

    def load_selected_file(self):
        """Método para cargar la imagen seleccionada en QGIS."""
        file_path = self.txt_file_path.text()
        if file_path:
            layer = QgsRasterLayer(file_path, "Imagen Seleccionada")
            if layer.isValid():
                QgsProject.instance().addMapLayer(layer)
                QMessageBox.information(self, "Éxito", "Imagen cargada correctamente en el proyecto.")
            else:
                QMessageBox.warning(self, "Error", "No se pudo cargar la imagen. Verifica el formato y la integridad del archivo.")
        else:
            QMessageBox.warning(self, "Advertencia", "Por favor, seleccione un archivo para cargar.")

    def populate_band_comboboxes(self, file_path):
        """Poblar las comboboxes con las bandas del archivo raster."""
        dataset = gdal.Open(file_path)
        if not dataset:
            QtWidgets.QMessageBox.warning(self, "Error", "No se pudo abrir el archivo. Verifica el formato y la integridad del archivo.")
            return
        
        band_count = dataset.RasterCount
        band_indices = [str(i) for i in range(1, band_count + 1)]  # Crear una lista con las bandas disponibles
        
        # Limpiar y poblar las comboboxes con el número correcto de bandas
        self.comboBoxBlueIndex.clear()
        self.comboBoxGreenIndex.clear()
        self.comboBoxRedIndex.clear()
        self.comboBoxNIRIndex.clear()

        self.comboBoxBlueIndex.addItems(band_indices)
        self.comboBoxGreenIndex.addItems(band_indices)
        self.comboBoxRedIndex.addItems(band_indices)

        # Agregar la opción "N/A" por defecto en NIR
        self.comboBoxNIRIndex.addItem("N/A")
        self.comboBoxNIRIndex.addItems(band_indices)

    def load_file(self, file_path):
        """Método para cargar el archivo corregido en el proyecto."""
        if file_path:
            layer = QgsRasterLayer(file_path, "Imagen Corregida")
            if layer.isValid():
                QgsProject.instance().addMapLayer(layer)
                QtWidgets.QMessageBox.information(self, "Éxito", "Imagen corregida cargada correctamente.")
            else:
                QtWidgets.QMessageBox.warning(self, "Error", "No se pudo cargar la imagen corregida.")
        else:
            QtWidgets.QMessageBox.warning(self, "Advertencia", "Por favor, seleccione un archivo válido.")

    def on_ok_button_clicked(self):
        """Método para ejecutar la corrección radiométrica al hacer clic en OK."""
        file_path = self.txt_file_path.text()
        output_file_path = self.txt_file_path_save.text()
        if file_path and output_file_path:
            self.start_radiometric_correction(file_path, output_file_path)
        else:
            QtWidgets.QMessageBox.warning(self, "Advertencia", "Por favor, seleccione un archivo y una ruta de salida antes de proceder.")

    def start_radiometric_correction(self, file_path, output_file_path):
        """Inicia la corrección radiométrica en un hilo separado."""
        self.progressBar.setValue(0)
        self.is_canceled = False

        # Verificar si la banda NIR fue marcada como "N/A"
        nir_index = self.comboBoxNIRIndex.currentText()
        if nir_index == "N/A":
            nir_index = None
        else:
            nir_index = int(nir_index)
        
        self.thread = RadiometricCorrectionThread(file_path, output_file_path, self, nir_index=nir_index)
        self.thread.progress.connect(self.update_progress)
        self.thread.finished.connect(self.process_finished)
        self.thread.start()

    def update_progress(self, value):
        """Actualizar el progreso de la barra."""
        self.progressBar.setValue(value)

    def process_finished(self, success):
        """Método llamado cuando el proceso de corrección radiométrica ha terminado."""
        if success:
            QtWidgets.QMessageBox.information(self, "Éxito", "La corrección radiométrica se ha completado.")
            self.load_file(self.thread.result_file_path)
        else:
            QtWidgets.QMessageBox.warning(self, "Error", "El proceso fue cancelado o ocurrió un error.")
        self.progressBar.setValue(100 if success else 0)

    def cancel_process(self):
        """Cancelar el proceso en ejecución."""
        if self.thread.isRunning():
            self.is_canceled = True
            self.thread.requestInterruption()
            self.thread.quit()
            self.thread.wait()
            QtWidgets.QMessageBox.information(self, "Cancelado", "El proceso ha sido cancelado.")
        self.clean_txt_file_path()
        self.clear_band_selections()

    def clear_band_selections(self):
        """Limpia la selección de bandas y campos de texto asociados."""
        self.leBandIndexblue.clear()
        self.leSolarIrradianceblue.clear()
        self.leOffsetblue.clear()
        self.leScaleFactorblue.clear()
        
        self.leBandIndexgreen.clear()
        self.leSolarIrradiancegreen.clear()
        self.leOffsetgreen.clear()
        self.leScaleFactorgreen.clear()
        
        self.leBandIndexred.clear()
        self.leSolarIrradiancered.clear()
        self.leOffsetred.clear()
        self.leScaleFactorred.clear()
        
        self.leBandIndexnir.clear()
        self.leSolarIrradiancenir.clear()
        self.leOffsetnir.clear()
        self.leScaleFactornir.clear()

    def open_help_url(self):
        """Abrir la URL de ayuda en el navegador."""
        webbrowser.open('https://www.example.com/help')  # Cambia esta URL al enlace de ayuda correcto.

class RadiometricCorrectionThread(QThread):
    """Hilo para realizar la corrección radiométrica en segundo plano."""
    progress = pyqtSignal(int)
    finished = pyqtSignal(bool)

    def __init__(self, file_path, output_file_path, dialog, nir_index=None):
        QThread.__init__(self)
        self.file_path = file_path
        self.output_file_path = output_file_path
        self.dialog = dialog
        self.result_file_path = None
        self.nir_index = nir_index

    def run(self):
        dataset = gdal.Open(self.file_path)
        if not dataset:
            self.finished.emit(False)
            return

        bands = {
            'Blue': {
                'index': int(self.dialog.leBandIndexblue.text()),
                'solar_irradiance': float(self.dialog.leSolarIrradianceblue.text()),
                'offset': float(self.dialog.leOffsetblue.text()),
                'scale_factor': float(self.dialog.leScaleFactorblue.text())
            },
            'Green': {
                'index': int(self.dialog.leBandIndexgreen.text()),
                'solar_irradiance': float(self.dialog.leSolarIrradiancegreen.text()),
                'offset': float(self.dialog.leOffsetgreen.text()),
                'scale_factor': float(self.dialog.leScaleFactorgreen.text())
            },
            'Red': {
                'index': int(self.dialog.leBandIndexred.text()),
                'solar_irradiance': float(self.dialog.leSolarIrradiancered.text()),
                'offset': float(self.dialog.leOffsetred.text()),
                'scale_factor': float(self.dialog.leScaleFactorred.text())
            }
        }

        # Añadir la banda NIR solo si no es "N/A"
        if self.nir_index is not None:
            bands['NIR'] = {
                'index': self.nir_index,
                'solar_irradiance': float(self.dialog.leSolarIrradiancenir.text()),
                'offset': float(self.dialog.leOffsetnir.text()),
                'scale_factor': float(self.dialog.leScaleFactornir.text())
            }

        output_bands = []
        for band_name, band_data in bands.items():
            band = dataset.GetRasterBand(band_data['index'])
            band_array = band.ReadAsArray().astype(float)
            
            # Aplicar la corrección radiométrica
            band_corrected = (
                (band_array - band_data['offset']) * band_data['scale_factor'] / band_data['solar_irradiance']
            )
            output_bands.append(band_corrected)

            if self.dialog.is_canceled:
                self.finished.emit(False)
                return

            self.progress.emit(int((len(output_bands) / len(bands)) * 100))

        # Guardar la imagen corregida en el archivo especificado
        driver = gdal.GetDriverByName('GTiff')
        output_dataset = driver.Create(
            self.output_file_path, dataset.RasterXSize, dataset.RasterYSize, len(output_bands), gdal.GDT_Float32
        )

        # Copiar las propiedades geoespaciales del dataset original
        output_dataset.SetGeoTransform(dataset.GetGeoTransform())
        output_dataset.SetProjection(dataset.GetProjection())

        for i, output_band in enumerate(output_bands, 1):
            output_dataset.GetRasterBand(i).WriteArray(output_band)

        output_dataset.FlushCache()
        self.result_file_path = self.output_file_path
        self.finished.emit(True)
